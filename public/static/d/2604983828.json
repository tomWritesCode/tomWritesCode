{"data":{"allContentfulTomWritesCodeBlog":{"edges":[{"node":{"intro":"This post covers how I made a terminal command that goes to the VS Code marketplace page of rasoberryCandy, scrapes for the number of downloads it has and then returns it in a styled fashion using Figlet and Cheerio.","slug":"raspberrycandy-web-scraper-with-nodejs","title":"raspberryCandy web scraper with NodeJS","updatedAt":"14-May-2019","post":{"post":"![Large GIF 912x276](//images.ctfassets.net/u434ytvnd3bo/5XQ2c9F4uB37GT0jnBWrZP/79b58c210c0d4268a47e6af7f4ac4bce/Large_GIF_912x276.gif)\n\nGoing through a few tutorials that showed how to make a Node app that from my terminal will show me the number of downloads I have had, as well as doing the math on how long raspberryCandy has been released for. \n\nI went through [this article from scotch.io](https://scotch.io/tutorials/scraping-the-web-with-node-js) which used NodeJS, Cheerio and request-promise.\n\n---\n\n__- request-promise -__ *Makes the HTTP request which supports promises. The extension of the standard request promise.*\n  \n__- Cheerio -__ *Helps to traverse the DOM letting us select parts of the page we would like to extract.*\n\n---\n\nFiglet is a great package for making ASCII art from text and has a library of different ways to do so. Chalk is used to colour the text of the response in the terminal which means I could keep the raspberryCandy colours being returned. \n\nThe first part of my code is making the piece that looks after displaying when raspberryCandy was released and how many days it has been released for which sits below the number of downloads in the command line result. To do this all I used was the Date function built into Javascript, making one of the dates the release which I already knew and wasnt going to change just put it straight in. And then another date which is the date and time that the function is called.\n\n---\n\n    const release = new Date(\"February 19, 2019 11:46:11\");\n    const current = new Date();\n\n---\n\nFollowing that I made a function which calculates how many days raspberryCandy has been out. The function works in two steps, firslty it subtracts the release date from the current date which then gives us the amount of time bwtween the dates but in Milliseconds (which isn't the most readable).\n\n---\n    \n    function dateDiff() {\n        \tlet difference = current - release;\n     }     \n\n---\n\nStep two of the function takes the result in milliseconds and divides it by the math that converts milliseconds to days. This is wrapped in a Math.round() function to give whole days as a return without a decimal.\n\n\n---\n\n    function dateDiff() {\n    \tlet difference = current - release;\n    \treturn Math.round(difference / (60 * 60 * 24 * 1000));\n}\n    \n---\n\nNow for the main party trick, scraping the marketplace page for raspberryCandy to get the number of downloads. This is where we use the request-promise package and give it the target url which in this case is the page on the Visual Studio Marketplace.\n\nInspecting the page prior to building this I found that the piece I was after was a span with the class name 'downloads-text'. Using Cheerio I can target the span with the right class name from the HTML document and then return it as plain text. Below I have laid out the basic structure of what it is doing. \n\n---\n\n    request-promise(URL).then(function(html) \n      {\n        cheerio(\"span.downloads-text\", html).text()\n      }\n\n---\n\nNow that we have the heavy lifting out of the way the structure comes into play. In my example I have wrapped each of the console.log() returns with the Chalk package allowing me to set the colour, in this case I am going with the Purple and Aqua colours of raspberryCandy.\n\n___\n\n    console.log(\n      chalk.hex(\"#e592faff\").bold(\" WOW! raspberryCandy has:\")\n    );\n___\n\nThe other extra piece is using Figlet which gives me the ASCII art, this wraps around the Cherrio function and takes the properties of what font to use, as well as the horizontal and vertical layouts. \n\n___\n\n    console.log(\n      chalk.hex(\"#00feff\")(\n        figlet.textSync($(\"span.downloads-text\", html).text(), {\n          font: \"Big\",\n          horizontalLayout: \"default\",\n          verticalLayout: \"default\"\n        })\n      )\n    );\n___\n\nNow that it's all pieced together the last thing left to do was to link it to my terminal as a single command rather than having to go to the file system and run the JS file. To do this, we add a line to the top of the file which will let us add our command to the package.json.\n\n___\n\n    #!/usr/bin/env node\n___\n\nThis line will let it be triggered as a Node command and run. This will also let the next part we add to the package.json work. Inside the package.json I have added:\n\n___\n\n    \"bin\": {\n      \"raspberry\": \"./raspberryScraper.js\"\n    },\n\n___\n\nFinal step is to run *__npm link__* in the terminal while in the folder. This takes the bin command, in this case *__\"raspberry\"__* and then launches the command *__\"./raspberryScraper.js\"__*. This is similar to any short hand command like *__npm run start__* or *__gatsby develop__*.\n\n___\n\n## Links\n\n### - [__Scotch.io article I got most of the resources from.__](https://scotch.io/tutorials/scraping-the-web-with-node-js \"Scotch.io Article\")\n### - [__request-promise GitHub page__](https://github.com/request/request-promise \"request-promise GitHub Page\")\n### - [__Cheerio GitHub page__](https://github.com/cheeriojs/cheerio \"Cheerio GitHub Page\")\n### - [__Figlet NPM page__](https://www.npmjs.com/package/figlet \"Figlet NPM Page\")\n### - [__My GitHub page of the scraper__](https://github.com/tomWritesCode/raspberryScraper \"tomWritesCode GitHub source code\")\n"}}},{"node":{"intro":"raspberryCandy has been a project running in the background for about 2 months now. As of now. It's finished and published.","slug":"raspberrycandy-i-made-a-vs-code-theme","title":"raspberryCandy - I made a VS Code theme","updatedAt":"05-May-2019","post":{"post":"I have been interested in making a VS Code theme for a while now and I started looking into it and saw an article by Sarah Drasner on CSS Tricks which got the ball rolling. \n\nGoing through some more articles and I got the ball rolling for raspberryCandy, my neon/pastel theme. The name comes from my favorite blend of coffee from ONA in Marrickville, Australia.\n\n![screenShot](//images.ctfassets.net/u434ytvnd3bo/2RH3azl2Z6YFdiXblptspp/ca7ef56f44963f787b4b8775353363a0/screenShot.png)\n\nAnd now it's all done! I am really happy with how it has turned out, It has been a really good project to work on. \n\nBelow is a list of the links I used that helped me get it into the marketplace.\n\n- [Creating a VS Code Theme - Sarah Drasner - CSS Tricks](https://css-tricks.com/creating-a-vs-code-theme/?fbclid=IwAR1qhdXb01kZdZZn8HB5KY0nLtRCRobG21u1BxGAxG2xoLYp7HRcpRN1SiE \"Sarah Drasner's Article on building a VS Code theme for CSS Tricks\")\n\n- [VS Code Docs (Really helpful with all the detail of interactions and what changes what.](https://code.visualstudio.com/api/references/theme-color?fbclid=IwAR1aId1wnpMRtGQOlEP7A1UOOJebFOQm6nP8GpTfylEl2BKEgb4sYdAlfWo \"VS Code Docs\") \n\n- [VS Code Extension Manifest (List of all the things that are needed and optional in a theme package)](https://code.visualstudio.com/api/references/extension-manifest?fbclid=IwAR2omxhZzfqPQfD08SqOHlSdXRPOocZvfYA5n-2FBeM0Dk-WAoeLAS9H46w \"VS Code Extension Manifest.\") "}}},{"node":{"intro":"I recently launched my website, and with that comes hosting. I was originally going to go with Netlify for my hosting but ended up with Zeit's Now service. ","slug":"hosting-a-gatsby-site-on-zeit-now","title":"Hosting a Gatsby Site on Zeit Now","updatedAt":"05-March-2019","post":{"post":"I bought my domain tomwritesco.de from Zeit's new domain service. The thing I didn't look into when purchasing was if I could chage the name server which would allow me to host my site on Netlify and take advantge of their auto rebuild and web-hooks that would trigger a rebuild when I updated Contentful. \n\nHosting the site on Zeit's Now was really easy, I only had to do a little bit of research in what was needed to get a Gatsby project going. The main part was putting a __now.json__ file into the root of the project. \n\nInside of the __now.json__ file just needs to have the following. \n\n    {\n      \"version\": 2,\n      \"name\": \"Your Project Name\",\n      \"build\": [\n        { \n          \"src\": \"package.json\",\n          \"use\": \"@now/static-build\",\n          \"config\": {\"distDir\": \"public\"} \n        }\n      ]\n    }\n\nThis file just lets Now know what to do with the files it is receiving. \"version\" is setting what verion of Now will be used (In this case version 2). \"name\" is what name will show up in your Zeit Dashboard. \"build\" is the main command that will set off the build of the Gatsby site and directs Now to the public folder which is build when Gatsby generates the static pages. "}}},{"node":{"intro":"Well, if you're reading this that can only mean one thing. I finally built the damn site. ","slug":"wasnt-build-in-a-day","title":"tomWritesCode wasn't built in a day.","updatedAt":"22-January-2019","post":{"post":"This is a personal website for me has always been the thing I have needed to build the most but prioritised the least. This should cover the website that took forever to build. \n\n\nSo, tomWritesCode, a site to house my blog, and just some basic stuff about me. It only took what felt like 300 years to make, a series of pushbacks due to other things I wanted to make and the constant learning of new things which makes more revisions etc, etc, (I'm sure that if you have ever made your own site you will know the feeling.)\n\n\nI went with a neon theme after playing around with a flicker animation for an idea, now it's the base of my whole site. the flicker annimation is using keyframes and there is another class for a delay to use the same animation on the same page.\n"}}}]}}}